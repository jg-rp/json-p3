"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(o,".").concat(d)]||c[d]||m[d]||s;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={},l="JSONPath Query Syntax",i={unversionedId:"guides/jsonpath-syntax",id:"guides/jsonpath-syntax",title:"JSONPath Query Syntax",description:"This page provides a casual introduction to JSONPath syntax described in the IETF JSONPath draft specification. We follow it strictly, and test against the JSONPath Compliance Test Suite.",source:"@site/docs/guides/jsonpath-syntax.md",sourceDirName:"guides",slug:"/guides/jsonpath-syntax",permalink:"/json-p3/guides/jsonpath-syntax",draft:!1,editUrl:"https://github.com/jg-rp/json-p3/tree/docs/docs/guides/jsonpath-syntax.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Quick start",permalink:"/json-p3/quick-start"},next:{title:"JSONPath Functions",permalink:"/json-p3/guides/jsonpath-functions"}},o={},p=[{value:"Segments, Selectors and Identifiers",id:"segments-selectors-and-identifiers",level:2},{value:"Root identifier",id:"root-identifier",level:3},{value:"Property names",id:"property-names",level:3},{value:"Array indices",id:"array-indices",level:3},{value:"Wildcard",id:"wildcard",level:3},{value:"Slices",id:"slices",level:3},{value:"Filters",id:"filters",level:3},{value:"Filter queries",id:"filter-queries",level:3},{value:"Filter functions",id:"filter-functions",level:3},{value:"Lists",id:"lists",level:3},{value:"Recursive descent",id:"recursive-descent",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jsonpath-query-syntax"},"JSONPath Query Syntax"),(0,r.kt)("p",null,"This page provides a casual introduction to JSONPath syntax described in the ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-20"},"IETF JSONPath draft")," specification. We follow it strictly, and test against the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jsonpath-standard/jsonpath-compliance-test-suite"},"JSONPath Compliance Test Suite"),"."),(0,r.kt)("p",null,'Imagine a JSON document as a tree structure, where each JSON object and array can contain more objects, arrays and scalar values. Every object, array and scalar value is a node in the tree, and the outermost value is the "root" node.'),(0,r.kt)("p",null,"Every query must start with either the root node identifier (",(0,r.kt)("inlineCode",{parentName:"p"},"$"),") or, within a ",(0,r.kt)("a",{parentName:"p",href:"#filters"},"filter selector"),", the current node identifier (",(0,r.kt)("inlineCode",{parentName:"p"},"@"),"). We then chain JSONPath ",(0,r.kt)("em",{parentName:"p"},"selectors")," together to retrieve nodes from the target document. Each selector operates on nodes matched by preceding selectors."),(0,r.kt)("p",null,"The result of a query is always a list of selected nodes after all selectors have been applied."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Strictly, using terminology from the ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-20"},"IETF JSONPath draft"),", we chain ",(0,r.kt)("em",{parentName:"p"},"segments"),", and those segments contain one or more ",(0,r.kt)("em",{parentName:"p"},"selectors"),"."),(0,r.kt)("p",{parentName:"admonition"},'We use the terms "target JSON document", "target document" and "query argument" interchangeably to mean the JSON value a query is applied to.  ')),(0,r.kt)("h2",{id:"segments-selectors-and-identifiers"},"Segments, Selectors and Identifiers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example JSON document"',title:'"Example',JSON:!0,'document"':!0},'{\n  "users": [\n    { "name": "Sue", "score": 100 },\n    { "name": "John", "score": 86, "admin": true },\n    { "name": "Sally", "score": 84, "admin": false },\n    { "name": "Jane", "score": 55 }\n  ],\n  "moderator": "John"\n}\n')),(0,r.kt)("h3",{id:"root-identifier"},"Root identifier"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$")," is the root node identifier, pointing to the first node in the target JSON document."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example query"',title:'"Example','query"':!0},"$.users\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'[\n  [\n    { "name": "Sue", "score": 100 },\n    { "name": "John", "score": 86, "admin": true },\n    { "name": "Sally", "score": 84, "admin": false },\n    { "name": "Jane", "score": 55 }\n  ]\n]\n')),(0,r.kt)("p",null,"A query containing just the root identifier returns the target document in its entirety."),(0,r.kt)("h3",{id:"property-names"},"Property names"),(0,r.kt)("p",null,"Select an object's properties using dot notation (",(0,r.kt)("inlineCode",{parentName:"p"},".thing"),") or within a ",(0,r.kt)("a",{parentName:"p",href:"#lists"},"bracketed segment")," (",(0,r.kt)("inlineCode",{parentName:"p"},"['thing']")," or ",(0,r.kt)("inlineCode",{parentName:"p"},'["thing"]'),"). Dot notation is only allowed if a property name does not contain reserved characters. These three queries are equivalent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$['users']\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'$["users"]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'[\n  [\n    { "name": "Sue", "score": 100 },\n    { "name": "John", "score": 86, "admin": true },\n    { "name": "Sally", "score": 84, "admin": false },\n    { "name": "Jane", "score": 55 }\n  ]\n]\n')),(0,r.kt)("h3",{id:"array-indices"},"Array indices"),(0,r.kt)("p",null,"Select array items by their index. Indices are zero-based and must be enclosed in brackets. If the index is negative, items are selected from the end of the array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="The first user"',title:'"The',first:!0,'user"':!0},"$.users[0]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="The last user"',title:'"The',last:!0,'user"':!0},"$.users[-1]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'[\n  { "name": "Sue", "score": 100 },\n  { "name": "Jane", "score": 55 }\n]\n')),(0,r.kt)("h3",{id:"wildcard"},"Wildcard"),(0,r.kt)("p",null,"Select all items from an array or values from an object using the wildcard selector. These two queries are equivalent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users.*.name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[*].name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'["Sue", "John", "Sally", "Jane"]\n')),(0,r.kt)("h3",{id:"slices"},"Slices"),(0,r.kt)("p",null,"Select a range of items from an array using slice notation, ",(0,r.kt)("inlineCode",{parentName:"p"},"[<start>:<stop>:<step>]"),". The start index, stop index and step are all optional. If a step is omitted, the last colon is optional and step defaults to 1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[0::2].name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'["Sue", "Sally"]\n')),(0,r.kt)("p",null,"Negative indices and steps are OK too."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[-1:0:-2].name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'["Jane", "John"]\n')),(0,r.kt)("h3",{id:"filters"},"Filters"),(0,r.kt)("p",null,"Selectively include child nodes from the current selection using filters of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"[?<expression>]"),". A filter expression can be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a Boolean expression using one of the comparison operators (",(0,r.kt)("inlineCode",{parentName:"li"},"=="),", ",(0,r.kt)("inlineCode",{parentName:"li"},"!="),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"li"},">"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<=")," and ",(0,r.kt)("inlineCode",{parentName:"li"},">="),"),"),(0,r.kt)("li",{parentName:"ul"},"an existence test on the result of a JSONPath query,"),(0,r.kt)("li",{parentName:"ul"},"or the truthiness of some function calls, depending on the function's return type.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[?@.admin]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'[\n  { "name": "John", "score": 86, "admin": true },\n  { "name": "Sally", "score": 84, "admin": false }\n]\n')),(0,r.kt)("h3",{id:"filter-queries"},"Filter queries"),(0,r.kt)("p",null,"Inside a filter expression, ",(0,r.kt)("inlineCode",{parentName:"p"},"@")," is the ",(0,r.kt)("em",{parentName:"p"},"current node identifier"),", starting a new JSONPath query with the current node at the root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[?@.score > 85].name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'["Sue", "John"]\n')),(0,r.kt)("p",null,"And the root node identifier (",(0,r.kt)("inlineCode",{parentName:"p"},"$"),") can be used to query from the target document root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[?@.name == $.moderator]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'[\n  {\n    "name": "Sally",\n    "score": 84,\n    "admin": false\n  }\n]\n')),(0,r.kt)("p",null,"Logical ",(0,r.kt)("em",{parentName:"p"},"and")," (",(0,r.kt)("inlineCode",{parentName:"p"},"&&"),") and ",(0,r.kt)("em",{parentName:"p"},"or")," (",(0,r.kt)("inlineCode",{parentName:"p"},"||"),") can be used to create more complex filters, and parentheses can be used to group terms."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[?@.score > 85 && @.score < 100].name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},'["John"]\n')),(0,r.kt)("h3",{id:"filter-functions"},"Filter functions"),(0,r.kt)("p",null,"Filter expressions can include calls to predefined functions. For example, the ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/guides/jsonpath-functions#match"},(0,r.kt)("inlineCode",{parentName:"a"},"match()"))," function matches nodes against a regular expression, if that node is a string value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[?match(@.name, 'S.*')].score\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},"[100, 84]\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/guides/jsonpath-functions"},"JSONPath Functions")," for a description of all standard filter functions."),(0,r.kt)("h3",{id:"lists"},"Lists"),(0,r.kt)("p",null,"Use a comma separated list of selectors enclosed in square brackets to apply multiple selectors and concatenate the results."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[1, 2].score\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},"[86, 94]\n")),(0,r.kt)("p",null,"Mixing selectors in a list of OK too."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$.users[0, ?@.name == 'Sally', 'foo'].score\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example output"',title:'"Example','output"':!0},"[100, 84]\n")),(0,r.kt)("h3",{id:"recursive-descent"},"Recursive descent"),(0,r.kt)("p",null,"The recursive descent segment (",(0,r.kt)("inlineCode",{parentName:"p"},"..[<selectors>]"),") visits all nodes, recursively, beneath the current selection in the JSON document tree. There mst be at least one selector. In this example we use shorthand notation for a property name (",(0,r.kt)("inlineCode",{parentName:"p"},"score"),"), but a bracketed selector list is OK too."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"$..score\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=Example output",title:"Example",output:!0},"[100, 86, 84, 55]\n")))}m.isMDXComponent=!0}}]);