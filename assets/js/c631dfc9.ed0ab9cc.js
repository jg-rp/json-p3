"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9261],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>N});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,N=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(N,i(i({ref:n},c),{},{components:t})):o.createElement(N,i({ref:n},c))}));function N(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1670:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={},i="JSON Pointer",s={unversionedId:"guides/json-pointer",id:"guides/json-pointer",title:"JSON Pointer",description:"JSON Pointer (RFC 6901) is a syntax for targeting a single value in JSON-like data. JSON Pointers can be resolved against data to retrieve the value, or used as part of a JSON Patch operation.",source:"@site/docs/guides/json-pointer.md",sourceDirName:"guides",slug:"/guides/json-pointer",permalink:"/json-p3/guides/json-pointer",draft:!1,editUrl:"https://github.com/jg-rp/json-p3/tree/docs/docs/guides/json-pointer.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"JSONPath Functions",permalink:"/json-p3/guides/jsonpath-functions"},next:{title:"JSON Patch",permalink:"/json-p3/guides/json-patch"}},p={},l=[{value:"Pointer resolution",id:"pointer-resolution",level:2},{value:"Errors and fallbacks",id:"errors-and-fallbacks",level:3},{value:"With parent",id:"with-parent",level:3},{value:"Utility methods",id:"utility-methods",level:2},{value:"<code>exists()</code>",id:"exists",level:3},{value:"<code>join()</code>",id:"join",level:3},{value:"<code>parent()</code>",id:"parent",level:3},{value:"<code>isRelativeTo()</code>",id:"isrelativeto",level:3},{value:"Relative JSON Pointer",id:"relative-json-pointer",level:2}],c={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"json-pointer"},"JSON Pointer"),(0,r.kt)("p",null,"JSON Pointer (",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc6901"},"RFC 6901"),") is a syntax for targeting a single value in JSON-like data. JSON Pointers can be ",(0,r.kt)("em",{parentName:"p"},"resolved")," against data to retrieve the value, or used as part of a JSON Patch operation."),(0,r.kt)("p",null,"A JSON Pointer is a Unicode string containing slash (",(0,r.kt)("inlineCode",{parentName:"p"},"/"),") separated tokens. Each token is either a potential property name for a JSON object, or a potential index for a JSON array. When a property name contains a slash (",(0,r.kt)("inlineCode",{parentName:"p"},"/"),") or a tilde (",(0,r.kt)("inlineCode",{parentName:"p"},"~"),"), they are encoded as ",(0,r.kt)("inlineCode",{parentName:"p"},"~1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"~0"),", respectively."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We have extended RFC 6901 to handle index/property pointers from ",(0,r.kt)("a",{parentName:"p",href:"https://www.ietf.org/id/draft-hha-relative-json-pointer-00.html"},"Relative JSON Pointer"),".")),(0,r.kt)("h2",{id:"pointer-resolution"},"Pointer resolution"),(0,r.kt)("p",null,"Resolve a JSON Pointer against some data using ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/namespaces/jsonpointer#resolve"},(0,r.kt)("inlineCode",{parentName:"a"},"jsonpointer.resolve(pointer, data)")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { jsonpointer } from "json-p3";\n\nconst data = {\n  users: [\n    { name: "Sue", score: 100 },\n    { name: "John", score: 86 },\n    { name: "Sally", score: 84 },\n    { name: "Jane", score: 55 },\n  ],\n};\n\nconst rv = jsonpointer.resolve("/users/1", data);\nconsole.log(rv); // { name: \'John\', score: 86 }\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resolve()")," is a convenience function equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"new JSONPointer(pointer).resolve(data)"),". Use the ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointer"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointer"))," constructor when you need to resolve the same pointer repeatedly against different data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { JSONPointer } from "json-p3";\n\nconst someData = {\n  users: [\n    { name: "Sue", score: 100 },\n    { name: "John", score: 86 },\n    { name: "Sally", score: 84 },\n  ],\n};\n\nconst otherData = {\n  users: [{ name: "Brian" }, { name: "Roy" }],\n};\n\nconst pointer = new JSONPointer("/users/1");\nconsole.log(pointer.resolve(someData)); // { name: \'John\', score: 86 }\nconsole.log(pointer.resolve(otherData)); // { name: \'Roy\' }\n')),(0,r.kt)("h3",{id:"errors-and-fallbacks"},"Errors and fallbacks"),(0,r.kt)("p",null,"If the pointer can't be resolved against the argument JSON value, one of ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointerIndexError"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointerIndexError")),", ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointerKeyError"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointerKeyError"))," or ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointerTypeError"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointerTypeError"))," is thrown. All three exceptions inherit from ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointerResolutionError"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointerResolutionError")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// .. continued from above\nconst rv = pointer.resolve("/users/1/age", data);\n// JSONPointerKeyError: no such property ("/users/1/age")\n')),(0,r.kt)("p",null,"A fallback value can be given as a third argument, which will be returned in the event of a ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONPointerResolutionError"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// .. continued from above\nconst rv = pointer.resolve("/users/1/age", data, -1);\nconsole.log(rv); // -1\n')),(0,r.kt)("h3",{id:"with-parent"},"With parent"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointer#resolvewithparent"},(0,r.kt)("inlineCode",{parentName:"a"},"resolveWithParent()"))," is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve()"),", but returns the target's parent value and the target value as a two-element array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { JSONPointer } from "json-p3";\n\nconst data = {\n  users: [\n    { name: "Sue", score: 100 },\n    { name: "John", score: 86 },\n    { name: "Sally", score: 84 },\n  ],\n};\n\nconst pointer = new JSONPointer("/users/1");\nconst [parent, target] = pointer.resolveWithParent(data);\n')),(0,r.kt)("p",null,"If the target value does not exist but the parent does, you'll get the parent object and the special ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/namespaces/jsonpointer#undefined"},(0,r.kt)("inlineCode",{parentName:"a"},"UNDEFINED"))," symbol. Similarly, if the pointer is pointing to the JSON document root, you'll get ",(0,r.kt)("inlineCode",{parentName:"p"},"UNDEFINED")," and the target document in its entirety."),(0,r.kt)("p",null,"Otherwise, if the pointer's parent does not exist, a ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointerResolutionError"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointerResolutionError"))," is thrown."),(0,r.kt)("h2",{id:"utility-methods"},"Utility methods"),(0,r.kt)("h3",{id:"exists"},(0,r.kt)("inlineCode",{parentName:"h3"},"exists()")),(0,r.kt)("p",null,"Test for existence with ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointer#exists"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointer.exists(data)")),". It returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the target exists in ",(0,r.kt)("em",{parentName:"p"},"data"),", even if the target is falsy, and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { JSONPointer } from "json-p3";\n\nconst data = { foo: { bar: [1, 2, 3] }, baz: false };\n\nlet pointer = new JSONPointer("/foo/bar/0");\nconsole.log(pointer.exists(data)); // true\n\npointer = new JSONPointer("/foo/bar/9");\nconsole.log(pointer.exists(data)); // false\n\npointer = new JSONPointer("/baz");\nconsole.log(pointer.exists(data)); // true\n')),(0,r.kt)("h3",{id:"join"},(0,r.kt)("inlineCode",{parentName:"h3"},"join()")),(0,r.kt)("p",null,"Build child pointers using ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointer#join"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointer.join(...tokens)")),". It takes any number of JSON Pointer tokens and returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONPointer"),". Similar to joining a file system path, if a token has a leading slash, the previous pointer is ignored and a new ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONPointer")," is created, before processing of remaining tokens continues."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { JSONPointer } from "json-p3";\n\nconst pointer = new JSONPointer("/foo/bar");\n\nconsole.log(pointer.toString()); // /foo/bar\nconsole.log(pointer.join("baz").toString()); // /foo/bar/baz\nconsole.log(pointer.join("baz", "0").toString()); // /foo/bar/baz/0\nconsole.log(pointer.join("baz/qux", "0").toString()); // /foo/bar/baz/qux/0\n')),(0,r.kt)("h3",{id:"parent"},(0,r.kt)("inlineCode",{parentName:"h3"},"parent()")),(0,r.kt)("p",null,"Get a pointer to the parent of an existing JSON Pointer using ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointer#parent"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointer.parent()")),". If the pointer is pointing to the document root, ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," is returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { JSONPointer } from "json-p3";\n\nconst pointer = new JSONPointer("/foo/bar");\n\nconsole.log(pointer.toString()); // /foo/bar\nconsole.log(pointer.parent().toString()); // /foo\n')),(0,r.kt)("h3",{id:"isrelativeto"},(0,r.kt)("inlineCode",{parentName:"h3"},"isRelativeTo()")),(0,r.kt)("p",null,"Test if a pointer is a child of another using ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointer#isrelativeto"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointer.isRelativeTo()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { JSONPointer } from "json-p3";\n\nconst pointer = new JSONPointer("/foo/bar");\n\nlet anotherPointer = new JSONPointer("/foo/bar/0");\nconsole.log(anotherPointer.isRelativeTo(pointer)); // true\n\nanotherPointer = new JSONPointer("/foo/baz");\nconsole.log(anotherPointer.isRelativeTo(pointer)); // false\n')),(0,r.kt)("h2",{id:"relative-json-pointer"},"Relative JSON Pointer"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"https://www.ietf.org/id/draft-hha-relative-json-pointer-00.html"},"Relative JSON Pointer")," syntax with ",(0,r.kt)("a",{parentName:"p",href:"/json-p3/api/classes/jsonpointer.JSONPointer#to"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONPointer.to(rel)"))," to create a new pointer relative to an existing one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { JSONPointer } from "json-p3";\n\nconst data = { foo: { bar: [1, 2, 3], baz: [4, 5, 6] } };\nconst pointer = new JSONPointer("/foo/bar/2");\n\nconsole.log(pointer.resolve(data)); // 3\nconsole.log(pointer.to("0-1").resolve(data)); // 2\nconsole.log(pointer.to("2/baz/2").resolve(data)); // 6\n')))}u.isMDXComponent=!0}}]);